CREATE OR REPLACE PACKAGE RESTORE_PACKAGE IS
    PROCEDURE RESTORE(TIME IN TIMESTAMP);
    PROCEDURE RESTORE(MS IN NUMBER);
END RESTORE_PACKAGE;

CREATE OR REPLACE PACKAGE BODY RESTORE_PACKAGE IS
    PROCEDURE RESTORE(TIME IN TIMESTAMP) IS
    BEGIN
        RESTORE_PASSPORTS(TIME);
        RESTORE_PEOPLE(TIME);
        RESTORE_LOCATIONS(TIME);
    END RESTORE;

    PROCEDURE RESTORE(MS IN NUMBER) IS
    BEGIN
        RESTORE(SYSTIMESTAMP - NUMTODSINTERVAL(MS / 1000, 'SECOND'));
    END RESTORE;
END RESTORE_PACKAGE;

CREATE OR REPLACE PROCEDURE RESTORE_PEOPLE(TIME TIMESTAMP) IS
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE PEOPLE DISABLE ALL TRIGGERS';
    FOR EVENT IN (SELECT * FROM PEOPLE_LOGS WHERE EVENT_TIME >= TIME ORDER BY TIME DESC) LOOP
        IF EVENT.EVENT = 'INSERT' THEN
            DELETE FROM PEOPLE WHERE ID = EVENT.PERSON_ID;
        ELSIF EVENT.EVENT = 'UPDATE' THEN
            UPDATE PEOPLE
            SET NAME = EVENT.OLD_NAME,
                DATE_OF_BIRTH = EVENT.OLD_DATE_OF_BIRTH
                WHERE ID = EVENT.PERSON_ID;
        ELSE
            INSERT INTO PEOPLE VALUES (EVENT.PERSON_ID, EVENT.OLD_NAME, EVENT.OLD_DATE_OF_BIRTH);
        END IF;
        DELETE FROM PEOPLE_LOGS WHERE ID = EVENT.ID;
    END LOOP;
    EXECUTE IMMEDIATE 'ALTER TABLE PEOPLE ENABLE ALL TRIGGERS';
END RESTORE_PEOPLE;

CREATE OR REPLACE PROCEDURE RESTORE_LOCATIONS(TIME TIMESTAMP) IS
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE LOCATIONS DISABLE ALL TRIGGERS';
    FOR EVENT IN (SELECT * FROM LOCATIONS_LOGS WHERE EVENT_TIME >= TIME ORDER BY TIME DESC) LOOP
        IF EVENT.EVENT = 'INSERT' THEN
            DELETE FROM LOCATIONS WHERE ID = EVENT.LOCATION_ID;
        ELSIF EVENT.EVENT = 'UPDATE' THEN
            UPDATE LOCATIONS
            SET ADDRESS = EVENT.OLD_ADDRESS,
                POST_INDEX = EVENT.OLD_POST_INDEX
                WHERE ID = EVENT.LOCATION_ID;
        ELSE
            INSERT INTO LOCATIONS VALUES (EVENT.LOCATION_ID, EVENT.OLD_ADDRESS, EVENT.OLD_POST_INDEX);
        END IF;
        DELETE FROM LOCATIONS_LOGS WHERE ID = EVENT.ID;
    END LOOP;
    EXECUTE IMMEDIATE 'ALTER TABLE LOCATIONS ENABLE ALL TRIGGERS';
END;

CREATE OR REPLACE PROCEDURE RESTORE_PASSPORTS(TIME TIMESTAMP) IS
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE PASSPORTS DISABLE ALL TRIGGERS';
    FOR EVENT IN (SELECT * FROM PASSPORTS_LOGS WHERE EVENT_TIME >= TIME ORDER BY TIME DESC) LOOP
        IF EVENT.EVENT = 'INSERT' THEN
            DELETE FROM PASSPORTS WHERE ID = EVENT.PASSPORT_ID;
        ELSIF EVENT.EVENT = 'UPDATE' THEN
            UPDATE PASSPORTS
            SET PERSON_ID = EVENT.OLD_PERSON_ID,
                ISSUE_DATE = EVENT.OLD_ISSUE_DATE,
                LOCATION_ID = EVENT.OLD_LOCATION_ID
                    WHERE ID = EVENT.PASSPORT_ID;
        ELSE
            INSERT INTO PASSPORTS VALUES (EVENT.PASSPORT_ID, EVENT.OLD_PERSON_ID, EVENT.OLD_ISSUE_DATE, EVENT.OLD_LOCATION_ID);
        END IF;
        DELETE FROM PASSPORTS_LOGS WHERE ID = EVENT.ID;
    END LOOP;
    EXECUTE IMMEDIATE 'ALTER TABLE PASSPORTS ENABLE ALL TRIGGERS';
END RESTORE_PASSPORTS;

DECLARE
    TIME TIMESTAMP;
BEGIN
    RESTORE_PACKAGE.RESTORE(18000000);
END;